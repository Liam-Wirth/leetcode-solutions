use crate::Solution;
use std::collections::{HashSet, VecDeque}

impl Solution {
    pub fn open_lock(deadends: Vec<String>, target: String) -> i32 {
        //wait lets get our starting state first actually:
        let mut state: u32 = 0000;
        let target = Lock::new(target);
        if deadends.contains(state) {
            return -1;
        } 
        let mut visited: HashSet<Lock> = deadends.iter().map(|dead| Lock::new(dead));
        
        let mut q = VecDeque::new();
        q.push_back(state);

        while !q.is_empty() {

        }
        

        //Constraints say that starting state could be a deadend
        -1
    }

}
    #[derive(Copy, Clone, PartialEq, Eq, Hash)]
    struct Lock { //let me cook
        state: [u8; 4],
    }

    impl Lock {
        fn new (state: String) -> Self {
            let mut lock = Lock::default();
            //RAHHHHHH I LOVE ITERATORS RAHHHHHHHHHHH
            for i in state.parse().unwrap().into_iter() {
                lock.state[i] = i;
            }
            lock
        }
        fn default() -> Self {
            Lock { state: [0; 4] }
        }
        /// Returns the next possible states of the lock
        fn next(&self) -> Vec<Lock> {
            let mut out = Vec::new();
            
            for i in 0..4 {
                let mut next = self.clone();
                next.state[i] = (next.state[i] + 1) % 10;

                out.push(next);

                //consider the inverse (going down by 1)
                let mut next = self.clone();

                if next.state[i]-1 < 0 {
                    next.state[i] = 9;
                } else {
                    next.state[i] -= 1;
                }
                //we get all instances now forward and back spinning of the wheel
                out.push(next);
            }

            out
        }

    }
