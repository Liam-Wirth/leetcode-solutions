# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/yard/all/yard.rbi
#
# yard-0.9.28

module YARD
end
module YARD::Tags
end
class YARD::Tags::Library
  def abstract_tag(text); end
  def api_tag(text); end
  def attr_reader_tag(text); end
  def attr_tag(text); end
  def attr_writer_tag(text); end
  def attribute_directive(tag, parser); end
  def author_tag(text); end
  def deprecated_tag(text); end
  def directive_call(tag, parser); end
  def directive_create(tag_name, tag_buf, parser); end
  def endgroup_directive(tag, parser); end
  def example_tag(text); end
  def factory; end
  def factory=(arg0); end
  def group_directive(tag, parser); end
  def has_directive?(tag_name); end
  def has_tag?(tag_name); end
  def initialize(factory = nil); end
  def macro_directive(tag, parser); end
  def method_directive(tag, parser); end
  def note_tag(text); end
  def option_tag(text); end
  def overload_tag(text); end
  def param_tag(text); end
  def parse_directive(tag, parser); end
  def private_tag(text); end
  def raise_tag(text); end
  def return_tag(text); end
  def scope_directive(tag, parser); end
  def see_tag(text); end
  def self.default_factory; end
  def self.default_factory=(factory); end
  def self.define_directive(tag, tag_meth = nil, directive_class = nil); end
  def self.define_tag(label, tag, meth = nil); end
  def self.directive_method_name(tag_name); end
  def self.factory_method_for(tag); end
  def self.factory_method_for_directive(directive); end
  def self.instance; end
  def self.labels; end
  def self.sorted_labels; end
  def self.tag_method_name(tag_name); end
  def self.tag_or_directive_method_name(tag_name, type = nil); end
  def self.transitive_tags; end
  def self.transitive_tags=(arg0); end
  def self.visible_tags; end
  def self.visible_tags=(arg0); end
  def send_to_factory(tag_name, meth, text); end
  def since_tag(text); end
  def tag_create(tag_name, tag_buf); end
  def todo_tag(text); end
  def version_tag(text); end
  def visibility_directive(tag, parser); end
  def yield_tag(text); end
  def yieldparam_tag(text); end
  def yieldreturn_tag(text); end
end
