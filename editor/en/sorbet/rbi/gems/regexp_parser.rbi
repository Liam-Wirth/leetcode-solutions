# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/regexp_parser/all/regexp_parser.rbi
#
# regexp_parser-2.5.0

class Regexp::Parser
  def active_opts; end
  def anchor(token); end
  def assign_effective_number(exp); end
  def assign_referenced_expressions; end
  def backref(token); end
  def captured_group_count_at_level; end
  def captured_group_counts; end
  def captured_group_counts=(arg0); end
  def close_completed_character_set_range; end
  def close_group; end
  def close_set; end
  def conditional(token); end
  def conditional_nesting; end
  def conditional_nesting=(arg0); end
  def count_captured_group; end
  def decrease_nesting; end
  def escape(token); end
  def extract_options(input, options); end
  def free_space(token); end
  def group(token); end
  def increase_group_level(exp); end
  def intersection(token); end
  def keep(token); end
  def literal(token); end
  def meta(token); end
  def negate_set; end
  def nest(exp); end
  def nest_conditional(exp); end
  def nesting; end
  def nesting=(arg0); end
  def node; end
  def node=(arg0); end
  def open_group(token); end
  def open_set(token); end
  def options_group(token); end
  def options_stack; end
  def options_stack=(arg0); end
  def parse(input, syntax = nil, options: nil, &block); end
  def parse_token(token); end
  def posixclass(token); end
  def property(token); end
  def quantifier(token); end
  def range(token); end
  def root; end
  def root=(arg0); end
  def self.parse(input, syntax = nil, options: nil, &block); end
  def sequence_operation(klass, token); end
  def set(token); end
  def switching_options; end
  def switching_options=(arg0); end
  def total_captured_group_count; end
  def type(token); end
  include Regexp::Expression
  include Regexp::Expression::UnicodeProperty
end
class Regexp::Parser::ParserError < Regexp::Parser::Error
end
class Regexp::Parser::UnknownTokenTypeError < Regexp::Parser::ParserError
  def initialize(type, token); end
end
class Regexp::Parser::UnknownTokenError < Regexp::Parser::ParserError
  def initialize(type, token); end
end
